import{aC as I,r as u,c as n}from"./vendor-CBsB69ib.js";import{k as E}from"./api-BTqAopYE.js";const T=I("dashboard",()=>{const d=(e,t=null)=>{try{const a=localStorage.getItem(`dashboard_${e}`);return a?JSON.parse(a):t}catch(a){return console.warn(`Failed to parse stored data for ${e}:`,a),t}},i=(e,t)=>{try{localStorage.setItem(`dashboard_${e}`,JSON.stringify(t))}catch(a){console.warn(`Failed to store data for ${e}:`,a)}},o=u(d("stats",{})),c=u(!1),s=u(null),l=u(d("lastFetchTime",null)),r=u(d("cacheExpiry",null)),m=5*60*1e3,S=n(()=>c.value),D=n(()=>s.value!==null),p=n(()=>{var e;return((e=s.value)==null?void 0:e.message)||""}),g=n(()=>Object.keys(o.value).length>0),v=n(()=>r.value?Date.now()<r.value:!1),_=n(()=>!l.value||!v.value),b=async(e=!1)=>{if(!e&&g.value&&v.value)return console.log("[Dashboard] 使用缓存数据"),o.value;try{c.value=!0,s.value=null,console.log("[Dashboard] 获取统计数据...");const t=await E.getStats({showLoading:!1});if(t&&t.status===200){const f=(t.data||{}).vector_store||{};return o.value={...f,total_documents:f.total_documents||0,total_chunks:f.total_chunks||0},l.value=new Date().toISOString(),r.value=Date.now()+m,i("stats",o.value),i("lastFetchTime",l.value),i("cacheExpiry",r.value),console.log("[Dashboard] 统计数据已更新",o.value),o.value}}catch(t){throw console.error("[Dashboard] 获取统计数据失败:",t),s.value=t,t}finally{c.value=!1}},w=async()=>await b(!0),y=e=>{const a=(o.value.provider_distribution||{})[e];return a?a.percentage:0},C=e=>{const a=(o.value.provider_distribution||{})[e];return a?a.count:0},F=e=>({腾讯云:"#00d4aa",阿里云:"#ff6a00",火山云:"#ff4d4f",华为云:"#ff0000",AWS:"#ff9900",Azure:"#0078d4",GCP:"#4285f4"})[e]||"#409eff",h=()=>{console.log("[Dashboard] 清除缓存数据"),o.value={},l.value=null,r.value=null,s.value=null,localStorage.removeItem("dashboard_stats"),localStorage.removeItem("dashboard_lastFetchTime"),localStorage.removeItem("dashboard_cacheExpiry"),console.log("[Dashboard] 缓存已清除，下次访问将重新加载数据")};return{stats:o,loading:c,error:s,lastFetchTime:l,cacheExpiry:r,isLoading:S,hasError:D,errorMessage:p,hasData:g,isCacheValid:v,shouldRefresh:_,fetchStats:b,refreshStats:w,getProviderPercentage:y,getProviderCount:C,getProviderColor:F,clearCache:h,markForRefresh:()=>{console.log("[Dashboard] 标记需要刷新数据"),h(),r.value=null,l.value=null,console.log("[Dashboard] 缓存已标记为无效，下次访问将重新加载")},reset:()=>{h(),c.value=!1}}});export{T as u};
